# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'LoginIn1.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
# 对登录界面进行美化
import json
import os
import IMS.FileOperation as files
from PyQt5 import QtGui
from PyQt5.Qt import *
from qtpy import QtWidgets, QtCore
import sys
import IMS.Regis,IMS.Menu

class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super(Ui_MainWindow, self).__init__()
        self.setupUi(self)



    # set background_img
    def paintEvent(self, event):
        painter = QPainter(self)
        painter.drawRect(self.rect())
        pixmap = QPixmap("D:\Project\IMS\软件界面\\2.jpg")  # 换成自己的图片的相对路径
        painter.drawPixmap(self.rect(), pixmap)

    # # mouse Press window event
    # def mousePressEvent(self, event):
    #     if event.button() == Qt.LeftButton:
    #         #globalPos()获取根窗口的相对路径，frameGeometry().topLeft()获取主窗口左上角的位置
    #         self.dragPosition = event.globalPos() - self.frameGeometry().topLeft()
    #         #QApplication.postEvent(self, QEvent(174))
    #         event.accept() # 鼠标事件被系统接收
    #
    # # mouse move window event
    # def mouseMoveEvent(self, event):
    #     #self.dragPosition = event.globalPos() - self.frameGeometry().topLeft()
    #     if event.buttons() == Qt.LeftButton:
    #         self.move(event.globalPos() - self.dragPosition)
    #         event.accept()

    # def mousePressEvent(self, event):
    #     if event.button() == Qt.LeftButton:
    #         self.m_flag = True
    #         self.m_Position = event.globalPos() - self.pos()  # 获取鼠标相对窗口的位置
    #         event.accept()
    #         self.setCursor(QCursor(Qt.OpenHandCursor))  # 更改鼠标图标
    #
    # def mouseMoveEvent(self, QMouseEvent):
    #     if Qt.LeftButton and self.m_flag:
    #         self.move(QMouseEvent.globalPos() - self.m_Position)  # 更改窗口位置
    #         QMouseEvent.accept()
    #
    # def mouseReleaseEvent(self, QMouseEvent):
    #     self.m_flag = False
    #     self.setCursor(QCursor(Qt.ArrowCursor))

    # MainWindow
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(568, 359)
        Form.setWindowOpacity(0.97) # 设置透明度
        Form.setAttribute(QtCore.Qt.WA_TranslucentBackground,True)  # 设置窗口背景透明
        Form.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint ) # 无边框置顶

        # self.m_Position = True  # 获取鼠标相对窗口的位置
        # self.m_flag = True
        self.file = ''

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Form.sizePolicy().hasHeightForWidth())
        Form.setSizePolicy(sizePolicy)

        self.widget = QtWidgets.QWidget(Form)
        self.widget.setGeometry(QtCore.QRect(30, 90, 261, 31))
        self.widget.setObjectName("widget")

        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.label_2 = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)

        self.comboBox = QtWidgets.QComboBox(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(2)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox.sizePolicy().hasHeightForWidth())
        self.comboBox.setSizePolicy(sizePolicy)
        self.comboBox.setStyleSheet("border:1px solid PaleGreen;border-radius: 4px;")
        self.comboBox.setEditable(True) # 可编辑
        self.comboBox.setMaxVisibleItems(5)  # 设置最大显示下列项 超过要使用滚动条拖拉
        self.comboBox.addItems(self.initialize())
        self.comboBox.setObjectName("comboBox")
        self.horizontalLayout.addWidget(self.comboBox)

        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(70, 260, 201, 31))
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton.setStyleSheet(
            "QPushButton{"
            "background-color:rgba(100,225,100,30);"  # 背景色（也可以设置图片）
            "border-style:outset;"  # 边框样式（inset/outset）
            "border-width:2px;"  # 边框宽度像素
            "border-radius:10px;"  # 边框圆角半径像素
            "border-color:rgba(255,255,255,30);"  # 边框颜色
            "font:bold 15px;"  # 字体，字体大小
            "color:rgba(0,0,0,100);"  # 字体颜色
            "padding:6px;"  # 填衬

            "}"
            # 鼠标按下样式
            "QPushButton:pressed{"
            # "background-color:rgba(100,225,100,30);"
            # "border-color:rgba(255,255,255,30);"
            # "border-style:inset;"
            # "color:rgba(0,0,0,100);"
            "font:bold 14px;"  # 字体，字体大小
            "border-width:2px;"  # 边框宽度像素
            "border-radius:10px;"  # 边框圆角半径像素
            "padding:6px;"  # 填衬
            "}"
            # 鼠标悬停样式
            "QPushButton:hover{"
            "background-color:rgba(100,255,100,100);"
            "border-color:rgba(255,255,255,200);"
            "color:White;"
            "}")
        self.pushButton.setObjectName("pushButton")


        self.pushButton1 = QtWidgets.QPushButton(Form)
        self.pushButton1.setGeometry(QtCore.QRect(70, 300, 201, 31))
        self.pushButton1.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton1.setStyleSheet(
            "QPushButton{"
            "background-color:rgba(100,225,100,30);"  # 背景色（也可以设置图片）
            "border-style:outset;"  # 边框样式（inset/outset）
            "border-width:2px;"  # 边框宽度像素
            "border-radius:10px;"  # 边框圆角半径像素
            "border-color:rgba(255,255,255,30);"  # 边框颜色
            "font:bold 15px;"  # 字体，字体大小
            "color:rgba(0,0,0,100);"  # 字体颜色
            "padding:6px;"  # 填衬

            "}"
            # 鼠标按下样式
            "QPushButton:pressed{"
            # "background-color:rgba(100,225,100,30);"
            # "border-color:rgba(255,255,255,30);"
            # "border-style:inset;"
            # "color:rgba(0,0,0,100);"
            "font:bold 14px;"  # 字体，字体大小
            "border-width:2px;"  # 边框宽度像素
            "border-radius:10px;"  # 边框圆角半径像素
            "padding:6px;"  # 填衬
            "}"
            # 鼠标悬停样式
            "QPushButton:hover{"
            "background-color:rgba(100,255,100,100);"
            "border-color:rgba(255,255,255,200);"
            "color:White;"
            "}")
        self.pushButton1.setObjectName("pushButton1")
        self.pushButton1.clicked.connect(QCoreApplication.quit)

        self.widget1 = QtWidgets.QWidget(Form)
        self.widget1.setGeometry(QtCore.QRect(30, 161, 261, 31))
        self.widget1.setObjectName("widget1")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget1)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")

        self.label_3 = QtWidgets.QLabel(self.widget1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_2.addWidget(self.label_3)

        self.lineEdit = QtWidgets.QLineEdit(self.widget1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(2)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit.sizePolicy().hasHeightForWidth())
        self.lineEdit.setSizePolicy(sizePolicy)
        self.lineEdit.setPlaceholderText('Include alpha,num,string...')  ##
        self.lineEdit.setEchoMode(QLineEdit.Password)  # 隐藏密码
        self.lineEdit.setStyleSheet("border:1px solid PaleGreen;border-radius: 4px;")
        #正则表达式：不以下划线开头，仅含下划线、数字、字母，长度为3至10位的密码
        reg = QRegExp('(?!_)[a-zA-Z0-9_]{3,10}')
        validator = QRegExpValidator()
        validator.setRegExp(reg)
        self.lineEdit.setValidator(validator)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout_2.addWidget(self.lineEdit)

        self.checkBox = QtWidgets.QCheckBox(Form)
        self.checkBox.setGeometry(QtCore.QRect(170, 210, 150, 16))
        self.checkBox.setStyleSheet("")
        self.checkBox.setObjectName("checkBox")
        self.checkBox.stateChanged.connect(lambda :self.display())

        self.pushButton2 = QtWidgets.QPushButton(Form)
        self.pushButton2.setGeometry(QtCore.QRect(480, 5, 80, 35))
        self.pushButton2.setFlat(True) # 按钮背景透明
        self.pushButton2.setStyleSheet("QPushButton{"
            "border-style:outset;"  # 边框样式（inset/outset）
            "border-width:2px;"  # 边框宽度像素
            "border-radius:10px;"  # 边框圆角半径像素
            "border-color:rgba(255,255,255,30);"  # 边框颜色
            "font:bold 15px;"  # 字体，字体大小
            "color:Gray;"  # 字体颜色
            "padding:6px;"  # 填衬

            "}"
            # 鼠标按下样式
            "QPushButton:pressed{"
            "font:bold 14px;"  # 字体，字体大小
            "border-width:2px;"  # 边框宽度像素
            "border-radius:10px;"  # 边框圆角半径像素
            "padding:6px;"  # 填衬
            "}"
            # 鼠标悬停样式
            "QPushButton:hover{"
            "border-color:rgba(255,255,255,200);"
            "color:White;"
            "}")
        self.pushButton2.setObjectName("pushButton2")


        self.pushButton.clicked.connect(lambda: self.examine_name_pwd(self.comboBox.currentText(), self.lineEdit.text()))


        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(Form)

    def display(self):
        if self.checkBox.isChecked():
            self.lineEdit.setEchoMode(QLineEdit.Normal)  # 隐藏密码
        else:
            self.lineEdit.setEchoMode(QLineEdit.Password) # 显示密码

    # label relation
    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.label_2.setText(_translate("Form", "User Name"))
        self.pushButton.setText(_translate("Form", "Login In"))
        self.pushButton1.setText(_translate("Form", "Quit"))
        self.label_3.setText(_translate("Form", "Password"))
        self.checkBox.setText(_translate("Form", "Display Password"))
        self.pushButton2.setText(_translate("Form", "Sign In"))

    def initialize(self):
        account_list = [img_name for img_name in os.listdir("D:\Project\IMS\\UserInfo")]  # os.listdir：获取文件夹中所有文件
        account_lists = []
        for item in account_list:
            account_lists.append(''.join(item.split('.')[0]))
        print(account_lists)
        return account_lists

    def examine_name_pwd(self,user_name, user_psw):
        # 验证账号密码是否正确
        file = 'D:\Project\IMS\\UserInfo\\' + user_name + '.json'
        dict1 = {}
        try:
            dict1 = json.loads(files.basic_file_read(file))  # 通过loads将json格式的文件转换成python格式的字典
        except:
            QMessageBox.critical(self, 'Warning', 'The account is not registered!!')
            return
        if dict1[user_name] == user_psw:
            print('密码输入正确')
            MainWindow.close()
            self.menu = IMS.Menu.Ui_Form(file) # 换成self后可正常运行
            self.menu.show()
        else:
            print('密码输入错误')
            QMessageBox.critical(self, 'Error', 'Password error!!')
            self.lineEdit.clear()  # clear lineedit data
            return








if __name__ == '__main__':
    app = QApplication(sys.argv)
    MainWindow = Ui_MainWindow()
    app.setWindowIcon(QIcon("D:\Project\IMS\\frequency.ico")) # 未显效
    RegisWindow = IMS.Regis.Ui_Form(MainWindow.comboBox)
    MainWindow.paintEngine()
    MainWindow.show()
    MainWindow.pushButton2.clicked.connect(lambda :RegisWindow.show())
    sys.exit(app.exec_())