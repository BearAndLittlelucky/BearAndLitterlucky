# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Regis.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

from PyQt5 import QtCore, QtGui, QtWidgets
import IMS.FileOperation  as files
from PyQt5.Qt import *


class Ui_Form(QDialog,QWidget):
    def __init__(self,comboBox):
        super().__init__()
        self.setupUi(self)
        self.comboBox = comboBox



    # set background_img
    def paintEvent(self, event):
        painter = QPainter(self)
        painter.drawRect(self.rect())
        pixmap = QPixmap("D:\Project\IMS\软件界面\注册1.jpg")  # 换成自己的图片的相对路径
        painter.drawPixmap(self.rect(), pixmap)

    def clear(self):
        self.lineEdit.clear()
        self.lineEdit_2.clear()
        self.lineEdit_3.clear()


    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(416, 444)
        Form.setMaximumSize(416, 444) # Fixed window size
        Form.setMinimumSize(416, 444) # Fixed window size
        Form.setWindowModality(Qt.ApplicationModal)  # disable parent window
        Form.setWindowIcon(QIcon("D:\Project\IMS\\frequency.ico"))
        Form.setWindowFlags(Qt.WindowStaysOnTopHint| Qt.WindowMinimizeButtonHint | Qt.WindowCloseButtonHint)  # 置顶，允许最小化和关闭
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Form.sizePolicy().hasHeightForWidth())
        Form.setSizePolicy(sizePolicy)

        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(100, 380, 231, 41))
        self.pushButton.setStyleSheet(
            "QPushButton{"
            "background-color:rgba(100,225,100,30);"  # 背景色（也可以设置图片）
            "border-style:outset;"  # 边框样式（inset/outset）
            "border-width:2px;"  # 边框宽度像素
            "border-radius:10px;"  # 边框圆角半径像素
            "border-color:rgba(255,255,255,30);"  # 边框颜色
            "font:bold 15px;"  # 字体，字体大小
            "color:LightSlateGray;"  # 字体颜色
            "padding:6px;"  # 填衬

            "}"
            # 鼠标按下样式
            "QPushButton:pressed{"
            "font:bold 14px;"  # 字体，字体大小
            "border-width:2px;"  # 边框宽度像素
            "border-radius:10px;"  # 边框圆角半径像素
            "padding:6px;"  # 填衬
            "}"
            # 鼠标悬停样式
            "QPushButton:hover{"
            "background-color:rgba(100,255,100,100);"
            "border-color:rgba(255,255,255,200);"
            "color:White;"
            "}")
        self.pushButton.setObjectName("pushButton")

        self.widget = QtWidgets.QWidget(Form)
        self.widget.setGeometry(QtCore.QRect(50, 180, 331, 151))
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")

        self.lineEdit = QtWidgets.QLineEdit(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.lineEdit.sizePolicy().hasHeightForWidth())
        self.lineEdit.setSizePolicy(sizePolicy)
        self.lineEdit.setPlaceholderText('Please input your name')  ##
        self.lineEdit.setStyleSheet("background:rgb(255,255,255,30);border:1px solid PaleGreen;border-radius: 4px;")
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setValidator(self.rx(1))
        self.verticalLayout.addWidget(self.lineEdit)

        self.lineEdit_2 = QtWidgets.QLineEdit(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.lineEdit_2.sizePolicy().hasHeightForWidth())
        self.lineEdit_2.setSizePolicy(sizePolicy)
        self.lineEdit_2.setPlaceholderText('Please input your password')  ##
        self.lineEdit_2.setEchoMode(QLineEdit.PasswordEchoOnEdit)  # 隐藏密码
        self.lineEdit_2.setStyleSheet("background:rgb(255,255,255,30);border:1px solid PaleGreen;border-radius: 4px;")
        self.lineEdit_2.setValidator(self.rx(0))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.verticalLayout.addWidget(self.lineEdit_2)

        self.lineEdit_3 = QtWidgets.QLineEdit(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.lineEdit_3.sizePolicy().hasHeightForWidth())
        self.lineEdit_3.setSizePolicy(sizePolicy)
        self.lineEdit_3.setMinimumSize(QtCore.QSize(0, 0))
        self.lineEdit_3.setPlaceholderText('Please input your password again')  ##
        self.lineEdit_3.setEchoMode(QLineEdit.PasswordEchoOnEdit) # 隐藏密码
        self.lineEdit_3.setStyleSheet("background:rgb(255,255,255,30);border:1px solid PaleGreen;border-radius: 4px;")
        self.lineEdit_3.setValidator(self.rx(0))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.verticalLayout.addWidget(self.lineEdit_3)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Create an account"))
        self.pushButton.setText(_translate("Form", "Sign In"))
        self.pushButton.clicked.connect(lambda :self.regist_menu())


    def regist_menu(self):
        user_name = self.lineEdit.text()
        user_pwd = self.lineEdit_2.text()
        user_repwd = self.lineEdit_3.text()
        if user_pwd != user_repwd:
            # 验证两次输入的密码是否相等
            #print('输入的两次密码不相等，请重新注册')
            #QApplication.setQuitOnLastWindowClosed(False)
            QMessageBox.critical(self,'Error', 'The two passwords do not match!!')
            return
        file = 'D:\\Project\\IMS\\UserInfo\\' + user_name + '.json'  # 将用户名设为json文件的文件名
        try:  # 判断用户名是否存在
            with open(file, 'r', encoding='utf-8'):
                #print('该账号已被注册，请重新注册')
                QMessageBox.critical(self, 'Warning', 'The account has been registered and please reregistered!!')

        except:
            content = {user_name: user_pwd, 'student': {}}  # 将用户名和密码以键值对的方式写入文件
            files.basic_file_write(file, content)  # 调用文件写入函数
            #print('注册成功')
            QMessageBox.information(self, 'Information', 'registered successfully!!')
            self.close() # close child window
            self.comboBox.addItem(user_name) # add comboBox item
            self.clear()  # clear lineedit data




    def rx(self,n):
        if n == 1:
            # 正则表达式：不以下划线开头，可含下划线、数字、字母、中文的帐号
            reg = QRegExp('^(?!_)[a-zA-Z0-9_\u4e00-\u9fa5]+$')
        else:
            # 正则表达式：不以下划线开头，仅含下划线、数字、字母，长度为3至10位的密码
            reg = QRegExp('(?!_)[a-zA-Z0-9_]{3,10}')
        validator = QRegExpValidator()
        validator.setRegExp(reg)
        #self.lineEdit.setValidator(validator)
        return validator




if __name__ == '__main__':
    app = QApplication(sys.argv)
    w = Ui_Form()
    w.show()
    sys.exit(app.exec_())